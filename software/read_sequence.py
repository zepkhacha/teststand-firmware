# Encoder FC7 sequencer status script
# Usage: python read_sequence.py [crate] [slot] [sequence]

import uhal, sys
uhal.disableLogging()

# check number of arguments
if len(sys.argv)!=4:
    print( 'usage: python read_sequence.py [crate] [slot] [sequence]')
    sys.exit(2)

uri = "ipbusudp-2.0://192.168."+sys.argv[1]+"."+sys.argv[2]+":50001"
address_table = "file://$GM2DAQ_DIR/address_tables/FC7_CCC.xml"
fc7 = uhal.getDevice("hw_id", uri, address_table)

# read sequencer registers
COUNT          = fc7.getNode("SEQ"+sys.argv[3]+".COUNT"         ).read()
TRIG_TYPE0     = fc7.getNode("SEQ"+sys.argv[3]+".TRIG.TYPE0"    ).read()
TRIG_TYPE1     = fc7.getNode("SEQ"+sys.argv[3]+".TRIG.TYPE1"    ).read()
TRIG_TYPE2     = fc7.getNode("SEQ"+sys.argv[3]+".TRIG.TYPE2"    ).read()
TRIG_TYPE3     = fc7.getNode("SEQ"+sys.argv[3]+".TRIG.TYPE3"    ).read()
TRIG_TYPE4     = fc7.getNode("SEQ"+sys.argv[3]+".TRIG.TYPE4"    ).read()
TRIG_TYPE5     = fc7.getNode("SEQ"+sys.argv[3]+".TRIG.TYPE5"    ).read()
TRIG_TYPE6     = fc7.getNode("SEQ"+sys.argv[3]+".TRIG.TYPE6"    ).read()
TRIG_TYPE7     = fc7.getNode("SEQ"+sys.argv[3]+".TRIG.TYPE7"    ).read()
TRIG_TYPE8     = fc7.getNode("SEQ"+sys.argv[3]+".TRIG.TYPE8"    ).read()
TRIG_TYPE9     = fc7.getNode("SEQ"+sys.argv[3]+".TRIG.TYPE9"    ).read()
TRIG_TYPE10    = fc7.getNode("SEQ"+sys.argv[3]+".TRIG.TYPE10"   ).read()
TRIG_TYPE11    = fc7.getNode("SEQ"+sys.argv[3]+".TRIG.TYPE11"   ).read()
TRIG_TYPE12    = fc7.getNode("SEQ"+sys.argv[3]+".TRIG.TYPE12"   ).read()
TRIG_TYPE13    = fc7.getNode("SEQ"+sys.argv[3]+".TRIG.TYPE13"   ).read()
TRIG_TYPE14    = fc7.getNode("SEQ"+sys.argv[3]+".TRIG.TYPE14"   ).read()
TRIG_TYPE15    = fc7.getNode("SEQ"+sys.argv[3]+".TRIG.TYPE15"   ).read()
PRE_TRIG_GAP0  = fc7.getNode("SEQ"+sys.argv[3]+".PRE_TRIG.GAP0" ).read()
PRE_TRIG_GAP1  = fc7.getNode("SEQ"+sys.argv[3]+".PRE_TRIG.GAP1" ).read()
PRE_TRIG_GAP2  = fc7.getNode("SEQ"+sys.argv[3]+".PRE_TRIG.GAP2" ).read()
PRE_TRIG_GAP3  = fc7.getNode("SEQ"+sys.argv[3]+".PRE_TRIG.GAP3" ).read()
PRE_TRIG_GAP4  = fc7.getNode("SEQ"+sys.argv[3]+".PRE_TRIG.GAP4" ).read()
PRE_TRIG_GAP5  = fc7.getNode("SEQ"+sys.argv[3]+".PRE_TRIG.GAP5" ).read()
PRE_TRIG_GAP6  = fc7.getNode("SEQ"+sys.argv[3]+".PRE_TRIG.GAP6" ).read()
PRE_TRIG_GAP7  = fc7.getNode("SEQ"+sys.argv[3]+".PRE_TRIG.GAP7" ).read()
PRE_TRIG_GAP8  = fc7.getNode("SEQ"+sys.argv[3]+".PRE_TRIG.GAP8" ).read()
PRE_TRIG_GAP9  = fc7.getNode("SEQ"+sys.argv[3]+".PRE_TRIG.GAP9" ).read()
PRE_TRIG_GAP10 = fc7.getNode("SEQ"+sys.argv[3]+".PRE_TRIG.GAP10").read()
PRE_TRIG_GAP11 = fc7.getNode("SEQ"+sys.argv[3]+".PRE_TRIG.GAP11").read()
PRE_TRIG_GAP12 = fc7.getNode("SEQ"+sys.argv[3]+".PRE_TRIG.GAP12").read()
PRE_TRIG_GAP13 = fc7.getNode("SEQ"+sys.argv[3]+".PRE_TRIG.GAP13").read()
PRE_TRIG_GAP14 = fc7.getNode("SEQ"+sys.argv[3]+".PRE_TRIG.GAP14").read()
PRE_TRIG_GAP15 = fc7.getNode("SEQ"+sys.argv[3]+".PRE_TRIG.GAP15").read()
fc7.dispatch()

print ('SEQ'+sys.argv[3]+'.COUNT          :   '+             str(int( COUNT         .value() )) )
print ('SEQ'+sys.argv[3]+'.TRIG.TYPE0     : b '+'{0:08b}'.format(int( TRIG_TYPE0    .value() )) )
print ('SEQ'+sys.argv[3]+'.TRIG.TYPE1     : b '+'{0:08b}'.format(int( TRIG_TYPE1    .value() )) )
print ('SEQ'+sys.argv[3]+'.TRIG.TYPE2     : b '+'{0:08b}'.format(int( TRIG_TYPE2    .value() )) )
print ('SEQ'+sys.argv[3]+'.TRIG.TYPE3     : b '+'{0:08b}'.format(int( TRIG_TYPE3    .value() )) )
print ('SEQ'+sys.argv[3]+'.TRIG.TYPE4     : b '+'{0:08b}'.format(int( TRIG_TYPE4    .value() )) )
print ('SEQ'+sys.argv[3]+'.TRIG.TYPE5     : b '+'{0:08b}'.format(int( TRIG_TYPE5    .value() )) )
print ('SEQ'+sys.argv[3]+'.TRIG.TYPE6     : b '+'{0:08b}'.format(int( TRIG_TYPE6    .value() )) )
print ('SEQ'+sys.argv[3]+'.TRIG.TYPE7     : b '+'{0:08b}'.format(int( TRIG_TYPE7    .value() )) )
print ('SEQ'+sys.argv[3]+'.TRIG.TYPE8     : b '+'{0:08b}'.format(int( TRIG_TYPE8    .value() )) )
print ('SEQ'+sys.argv[3]+'.TRIG.TYPE9     : b '+'{0:08b}'.format(int( TRIG_TYPE9    .value() )) )
print ('SEQ'+sys.argv[3]+'.TRIG.TYPE10    : b '+'{0:08b}'.format(int( TRIG_TYPE10   .value() )) )
print ('SEQ'+sys.argv[3]+'.TRIG.TYPE11    : b '+'{0:08b}'.format(int( TRIG_TYPE11   .value() )) )
print ('SEQ'+sys.argv[3]+'.TRIG.TYPE12    : b '+'{0:08b}'.format(int( TRIG_TYPE12   .value() )) )
print ('SEQ'+sys.argv[3]+'.TRIG.TYPE13    : b '+'{0:08b}'.format(int( TRIG_TYPE13   .value() )) )
print ('SEQ'+sys.argv[3]+'.TRIG.TYPE14    : b '+'{0:08b}'.format(int( TRIG_TYPE14   .value() )) )
print ('SEQ'+sys.argv[3]+'.TRIG.TYPE15    : b '+'{0:08b}'.format(int( TRIG_TYPE15   .value() )) )
print ('SEQ'+sys.argv[3]+'.PRE_TRIG.GAP0  :   '+             str(int( PRE_TRIG_GAP0 .value() )) )
print ('SEQ'+sys.argv[3]+'.PRE_TRIG.GAP1  :   '+             str(int( PRE_TRIG_GAP1 .value() )) )
print ('SEQ'+sys.argv[3]+'.PRE_TRIG.GAP2  :   '+             str(int( PRE_TRIG_GAP2 .value() )) )
print ('SEQ'+sys.argv[3]+'.PRE_TRIG.GAP3  :   '+             str(int( PRE_TRIG_GAP3 .value() )) )
print ('SEQ'+sys.argv[3]+'.PRE_TRIG.GAP4  :   '+             str(int( PRE_TRIG_GAP4 .value() )) )
print ('SEQ'+sys.argv[3]+'.PRE_TRIG.GAP5  :   '+             str(int( PRE_TRIG_GAP5 .value() )) )
print ('SEQ'+sys.argv[3]+'.PRE_TRIG.GAP6  :   '+             str(int( PRE_TRIG_GAP6 .value() )) )
print ('SEQ'+sys.argv[3]+'.PRE_TRIG.GAP7  :   '+             str(int( PRE_TRIG_GAP7 .value() )) )
print ('SEQ'+sys.argv[3]+'.PRE_TRIG.GAP8  :   '+             str(int( PRE_TRIG_GAP8 .value() )) )
print ('SEQ'+sys.argv[3]+'.PRE_TRIG.GAP9  :   '+             str(int( PRE_TRIG_GAP9 .value() )) )
print ('SEQ'+sys.argv[3]+'.PRE_TRIG.GAP10 :   '+             str(int( PRE_TRIG_GAP10.value() )) )
print ('SEQ'+sys.argv[3]+'.PRE_TRIG.GAP11 :   '+             str(int( PRE_TRIG_GAP11.value() )) )
print ('SEQ'+sys.argv[3]+'.PRE_TRIG.GAP12 :   '+             str(int( PRE_TRIG_GAP12.value() )) )
print ('SEQ'+sys.argv[3]+'.PRE_TRIG.GAP13 :   '+             str(int( PRE_TRIG_GAP13.value() )) )
print ('SEQ'+sys.argv[3]+'.PRE_TRIG.GAP14 :   '+             str(int( PRE_TRIG_GAP14.value() )) )
print ('SEQ'+sys.argv[3]+'.PRE_TRIG.GAP15 :   '+             str(int( PRE_TRIG_GAP15.value() )) )
